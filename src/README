1) 스프링 빈 컨테이너를 위한 빈 지정 애노테이션
@Component -> 역할에 따라 여러 개의 애노테이션을 추가로 제공
@Controller : 페이지 컨트롤러를 위한 애노테이션
@Service : 서비스 객체를 위한 애노테이션
@Repository: DAO를 위한 애노테이션

역할에 따라 애노테이션을 다르게 지정해 두면, 필요할 때 특정 역할의 클래스만 찾을 수 있다.
코드를 이해하는데 도움이 된다.

2) @RequestMapping에 대하여
. value 속성: 요청 URL을 지정. 확장자 명을 적지 않는 것이 유지보수에 좋다. 나중에 바뀔 수 있기 때문이다.
. method 속성: GET, POST 지정

호출 제약 조건을 설정할 수 있다.
. headers 속성: 속성에 지정된 헤더 이름이 요청 헤더에 있을 때만 호출한다.
. consumes 속성: 속성에 지정된 값이 요청 헤더 Content-Type과 일치할 때만 호출한다.
. produces 속성: 속성에 지정된 값이 요청 헤더 Accept와 일치할 때만 호출한다.
. params 속성: 속성에 지정된 값이 요청 정보에 있을 때만 호출한다.

3) @RequestParam
. value 속성: 요청 파라미터의 이름 지정
. defaultValue 속성: 요청 파라미터가 없거나 빈 문자열일 때 사용할 값 지정
. required 속성: 요청 파라미터의 필수 여부. 기본 값 true

이 애노테이션을 지정하지 않으면,
예) String execute(int no) {...}
int no 는 다음과 선언과 같다.
@RequestParam(value="no", required=false) int no
즉, 애노테이션을 지정하지 않으면 요청 정보를 가져올 때 파라미터 변수 이름을 사용한다.

* 주의 : 다음 오류 내용을 주의하라.
The requested resource is not available. 
=> 요청을 처리할 메서드를 찾지 못한 경우

The request sent by the client was syntactically incorrect.
=> 클라이언트가 보낸 요청 정보를 메서드의 파라미터 값으로 변환할 수 없을 때 오류 발생
=> 예) yyyy-MM-dd 형식의 문자열을 java.util.Date 객체로 변환하지 못할 때 발생.
=> 스프링은 간단한 변환은 처리해준다. 
   "문자열" -> byte, short, int, long, float, double, char, boolean
=> 그 외의 변환은 별도의 변환기를 등록해야 한다.


4) @InitBinder
. 요청 정보의 문자열을 특정 객체로 변환시켜주는 "커스텀 에디터" 준비
. 페이지 컨트롤러에서 요청 데이터를 처리하기 위해 커스텀 에디터를 등록하는 메서드에 애노테이션을 붙인다.
. 이 애노테이션이 붙은 메서드는 요청이 있을 때 마다 자동 호출됨.
. ScoreAdd 클래스의 initBinder() 메서드 참고 

5) @ControllerAdvice
. 페이지 컨트롤러에게 도움을 주는 클래스에 대해 표시
. 특히 글로벌 @InitBinder를 만들 때 사용
. java56.controller.bind.GlobalInitBinder 클래스 참조
. 단 이 애노테이션이 동작하려면 do-servlet.xml 파일에 다음의 선언을 해야 한다.
  <mvc:annotation-driven/>
















